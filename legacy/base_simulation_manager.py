#!/usr/bin/env python3
"""
Base Simulation Manager - Áµ±‰∏Ä„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ
SimPy‰ΩøÁî®/Èùû‰ΩøÁî®„ÇíÂàá„ÇäÊõø„ÅàÂèØËÉΩ„Å™ÊäΩË±°Âü∫Â∫ï„ÇØ„É©„Çπ
"""

from abc import ABC, abstractmethod
from typing import Dict, List, Callable, Optional, Any, Union
from dataclasses import dataclass
from enum import Enum
import time

from .simulation_object import Velocity, Pose


class SimulationBackend(Enum):
    """„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥„Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâÈÅ∏Êäû"""
    SIMPLE_WHILE_LOOP = "simple_while_loop"  # Pure Python, ÊúÄÈ´òÊÄßËÉΩ
    SIMPY_FREQUENCY_GROUP = "simpy_frequency_group"  # SimPyÊúÄÈÅ©ÂåñÁâà
    SIMPY_PURE = "simpy_pure"  # Á¥îÁ≤ãSimPy


@dataclass
class UnifiedSimulationConfig:
    """Áµ±‰∏Ä„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥Ë®≠ÂÆö"""
    # BackendÈÅ∏Êäû
    backend: SimulationBackend = SimulationBackend.SIMPLE_WHILE_LOOP
    
    # Âü∫Êú¨Ë®≠ÂÆö
    visualization: bool = False
    update_rate: float = 30.0  # Hz
    real_time_factor: float = 1.0  # 0.0 = maximum speed
    
    # ÊÄßËÉΩË®≠ÂÆö
    enable_frequency_grouping: bool = True  # SimPy‰ΩøÁî®ÊôÇ„ÅÆÊúÄÈÅ©Âåñ
    default_joint_update_rate: float = 10.0  # „Éá„Éï„Ç©„É´„Éà„É≠„Éú„ÉÉ„ÉàÊõ¥Êñ∞È†ªÂ∫¶
    
    # „Éá„Éê„ÉÉ„Ç∞Ë®≠ÂÆö
    verbose: bool = False
    performance_monitoring: bool = True


class BaseSimulationManager(ABC):
    """Áµ±‰∏Ä„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥ÁÆ°ÁêÜ„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ"""
    
    def __init__(self, config: UnifiedSimulationConfig):
        self.config = config
        self.robots: Dict[str, Any] = {}
        self.simulation_objects: Dict[str, Any] = {}
        self.control_callbacks: Dict[str, Callable] = {}
        
        # Áµ±Ë®àÊÉÖÂ†±
        self.stats = {
            'start_time': 0.0,
            'sim_time': 0.0,
            'frame_count': 0,
            'total_callbacks': 0,
            'total_updates': 0
        }
        
        self.running = False
        
        # ÂÆüË£ÖÂõ∫Êúâ„ÅÆÂàùÊúüÂåñ
        self._initialize_backend()
    
    @abstractmethod
    def _initialize_backend(self):
        """„Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâÂõ∫Êúâ„ÅÆÂàùÊúüÂåñ"""
        pass
    
    # === „É≠„Éú„ÉÉ„ÉàÁÆ°ÁêÜ ===
    
    @abstractmethod
    def add_robot_from_urdf(self, 
                           name: str, 
                           urdf_path: str,
                           initial_pose: Pose = None,
                           joint_update_rate: Optional[float] = None,
                           **kwargs) -> Any:
        """URDF„Åã„Çâ„É≠„Éú„ÉÉ„ÉàËøΩÂä†"""
        pass
    
    @abstractmethod
    def set_robot_velocity(self, robot_name: str, velocity: Velocity) -> bool:
        """„É≠„Éú„ÉÉ„ÉàÈÄüÂ∫¶Ë®≠ÂÆö"""
        pass
    
    @abstractmethod
    def set_robot_control_callback(self, 
                                  robot_name: str, 
                                  callback: Callable, 
                                  frequency: float = 10.0) -> bool:
        """„É≠„Éú„ÉÉ„ÉàÂà∂Âæ°„Ç≥„Éº„É´„Éê„ÉÉ„ÇØË®≠ÂÆö"""
        pass
    
    @abstractmethod
    def get_robot_pose(self, robot_name: str) -> Optional[Pose]:
        """„É≠„Éú„ÉÉ„Éà„Éù„Éº„Ç∫ÂèñÂæó"""
        pass
    
    # === „Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥Âà∂Âæ° ===
    
    @abstractmethod
    def run(self, duration: Optional[float] = None):
        """„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥ÂÆüË°å"""
        pass
    
    @abstractmethod
    def pause(self):
        """„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥‰∏ÄÊôÇÂÅúÊ≠¢"""
        pass
    
    @abstractmethod
    def resume(self):
        """„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥ÂÜçÈñã"""
        pass
    
    @abstractmethod
    def shutdown(self):
        """„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥ÁµÇ‰∫Ü"""
        pass
    
    # === ÊôÇÈñìÁÆ°ÁêÜ ===
    
    @abstractmethod
    def get_sim_time(self) -> float:
        """„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥ÊôÇÈñìÂèñÂæó"""
        pass
    
    @abstractmethod
    def set_real_time_factor(self, factor: float):
        """„É™„Ç¢„É´„Çø„Ç§„É†‰øÇÊï∞Ë®≠ÂÆö"""
        pass
    
    # === Áµ±Ë®àÊÉÖÂ†± ===
    
    def get_performance_stats(self) -> Dict[str, Any]:
        """ÊÄßËÉΩÁµ±Ë®àÂèñÂæó"""
        current_time = time.time()
        elapsed = current_time - self.stats['start_time'] if self.stats['start_time'] > 0 else 0.001
        
        return {
            'backend': self.config.backend.value,
            'elapsed_time': elapsed,
            'sim_time': self.stats['sim_time'],
            'rtf': self.stats['sim_time'] / elapsed if elapsed > 0 else 0,
            'frame_count': self.stats['frame_count'],
            'avg_fps': self.stats['frame_count'] / elapsed if elapsed > 0 else 0,
            'total_callbacks': self.stats['total_callbacks'],
            'callbacks_per_sec': self.stats['total_callbacks'] / elapsed if elapsed > 0 else 0,
            'num_robots': len(self.robots),
            'num_objects': len(self.simulation_objects)
        }
    
    def print_performance_summary(self):
        """ÊÄßËÉΩ„Çµ„Éû„É™„ÉºË°®Á§∫"""
        stats = self.get_performance_stats()
        
        print(f"\nüìä {stats['backend'].upper()} Performance Summary")
        print("=" * 50)
        print(f"Backend: {stats['backend']}")
        print(f"Robots: {stats['num_robots']}")
        print(f"Real Time Factor: {stats['rtf']:.3f}x")
        print(f"Frame Rate: {stats['avg_fps']:.1f} Hz")
        print(f"Callbacks/sec: {stats['callbacks_per_sec']:.1f}")
        
        # ÊÄßËÉΩË©ï‰æ°
        if stats['rtf'] >= 1.0:
            rating = "üöÄ EXCELLENT"
        elif stats['rtf'] >= 0.5:
            rating = "‚úÖ GOOD"
        elif stats['rtf'] >= 0.1:
            rating = "‚ö†Ô∏è FAIR"
        else:
            rating = "‚ùå POOR"
        
        print(f"Performance Rating: {rating}")
    
    # === „É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£ ===
    
    def get_backend_info(self) -> Dict[str, Any]:
        """„Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâÊÉÖÂ†±ÂèñÂæó"""
        return {
            'backend': self.config.backend,
            'description': self._get_backend_description(),
            'features': self._get_backend_features(),
            'performance_tier': self._get_performance_tier()
        }
    
    def _get_backend_description(self) -> str:
        """„Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâË™¨Êòé"""
        descriptions = {
            SimulationBackend.SIMPLE_WHILE_LOOP: "Pure Python while loop - ÊúÄÈ´òÊÄßËÉΩ„ÄÅÊúÄÂ∞èË§áÈõëÂ∫¶",
            SimulationBackend.SIMPY_FREQUENCY_GROUP: "SimPy with FrequencyGroup optimization - È´òÊÄßËÉΩ+„Ç§„Éô„É≥„ÉàÂá¶ÁêÜ",
            SimulationBackend.SIMPY_PURE: "Pure SimPy - ÊúÄÂ§ßÊ©üËÉΩÊÄß„ÄÅË§áÈõë„Å™„Ç§„Éô„É≥„ÉàÂá¶ÁêÜÂØæÂøú"
        }
        return descriptions.get(self.config.backend, "Unknown backend")
    
    def _get_backend_features(self) -> List[str]:
        """„Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâÊ©üËÉΩ"""
        features = {
            SimulationBackend.SIMPLE_WHILE_LOOP: [
                "ÊúÄÈ´òÊÄßËÉΩ (RTF ~1.0x)",
                "ÊúÄÂ∞è‰æùÂ≠òÈñ¢‰øÇ",
                "„Éá„Éê„ÉÉ„Ç∞ÂÆπÊòì",
                "Âü∫Êú¨ÁöÑ„Å™„É≠„Éú„ÉÉ„ÉàÂà∂Âæ°"
            ],
            SimulationBackend.SIMPY_FREQUENCY_GROUP: [
                "È´òÊÄßËÉΩ (RTF ~0.1-0.5x)",
                "„Éó„É≠„Çª„ÇπÊúÄÈÅ©Âåñ",
                "„É™„Ç¢„É´„Çø„Ç§„É†‰øÇÊï∞Âà∂Âæ°",
                "„Ç§„Éô„É≥„ÉàÂá¶ÁêÜÂØæÂøú"
            ],
            SimulationBackend.SIMPY_PURE: [
                "„Éï„É´Ê©üËÉΩ (RTF ~0.05x)",
                "Ë§áÈõë„Å™„Ç§„Éô„É≥„ÉàÂá¶ÁêÜ",
                "„É™„ÇΩ„Éº„ÇπÁÆ°ÁêÜ",
                "ÈùûÂêåÊúüÈÄö‰ø°"
            ]
        }
        return features.get(self.config.backend, [])
    
    def _get_performance_tier(self) -> str:
        """ÊÄßËÉΩ„ÉÜ„Ç£„Ç¢"""
        tiers = {
            SimulationBackend.SIMPLE_WHILE_LOOP: "S (ÊúÄÈ´òÊÄßËÉΩ)",
            SimulationBackend.SIMPY_FREQUENCY_GROUP: "A (È´òÊÄßËÉΩ)",
            SimulationBackend.SIMPY_PURE: "B (Ê©üËÉΩÈáçË¶ñ)"
        }
        return tiers.get(self.config.backend, "Unknown")


# === „Éï„Ç°„ÇØ„Éà„É™„ÉºÈñ¢Êï∞ ===

def create_simulation_manager(config: UnifiedSimulationConfig) -> BaseSimulationManager:
    """„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥ÁÆ°ÁêÜ„ÇØ„É©„Çπ„ÅÆ„Éï„Ç°„ÇØ„Éà„É™„Éº"""
    
    if config.backend == SimulationBackend.SIMPLE_WHILE_LOOP:
        from .simple_while_loop_manager import SimpleWhileLoopManager
        return SimpleWhileLoopManager(config)
    
    elif config.backend == SimulationBackend.SIMPY_FREQUENCY_GROUP:
        from .simpy_frequency_group_manager import SimPyFrequencyGroupManager
        return SimPyFrequencyGroupManager(config)
    
    elif config.backend == SimulationBackend.SIMPY_PURE:
        from .simpy_pure_manager import SimPyPureManager
        return SimPyPureManager(config)
    
    else:
        raise ValueError(f"Unknown backend: {config.backend}")


# === ‰æøÂà©Èñ¢Êï∞ ===

def quick_simulation(num_robots: int = 10, 
                    backend: SimulationBackend = SimulationBackend.SIMPLE_WHILE_LOOP,
                    visualization: bool = False,
                    duration: float = 10.0) -> Dict[str, Any]:
    """„ÇØ„Ç§„ÉÉ„ÇØ„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥ÂÆüË°å"""
    
    config = UnifiedSimulationConfig(
        backend=backend,
        visualization=visualization,
        real_time_factor=0.0 if not visualization else 1.0
    )
    
    sim = create_simulation_manager(config)
    
    try:
        # „É≠„Éú„ÉÉ„ÉàËøΩÂä†
        for i in range(num_robots):
            x = (i % 10) * 2.0
            y = (i // 10) * 2.0
            
            robot = sim.add_robot_from_urdf(
                name=f"robot_{i}",
                urdf_path="examples/robots/mobile_robot.urdf",
                initial_pose=Pose(x=x, y=y, z=0)
            )
            
            # Á∞°Âçò„Å™„Ç≥„É≥„Éà„É≠„Éº„É©
            def create_controller(robot_id):
                def controller(dt):
                    t = sim.get_sim_time()
                    velocity = Velocity(
                        linear_x=0.1,
                        angular_z=0.1 if robot_id % 2 == 0 else -0.1
                    )
                    sim.set_robot_velocity(f"robot_{robot_id}", velocity)
                return controller
            
            sim.set_robot_control_callback(f"robot_{i}", create_controller(i))
        
        # ÂÆüË°å
        sim.run(duration=duration)
        
        return sim.get_performance_stats()
        
    finally:
        sim.shutdown()


def compare_backends(num_robots: int = 20, duration: float = 3.0) -> Dict[str, Dict[str, Any]]:
    """„Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâÊÄßËÉΩÊØîËºÉ"""
    
    print(f"üîç Backend Performance Comparison ({num_robots} robots)")
    print("=" * 60)
    
    backends = [
        SimulationBackend.SIMPLE_WHILE_LOOP,
        SimulationBackend.SIMPY_FREQUENCY_GROUP
    ]
    
    results = {}
    
    for backend in backends:
        print(f"\nüß™ Testing {backend.value}...")
        
        try:
            stats = quick_simulation(
                num_robots=num_robots,
                backend=backend,
                visualization=False,
                duration=duration
            )
            
            results[backend.value] = stats
            print(f"   RTF: {stats['rtf']:.3f}x")
            
        except Exception as e:
            print(f"   ‚ùå Failed: {e}")
            results[backend.value] = None
    
    return results