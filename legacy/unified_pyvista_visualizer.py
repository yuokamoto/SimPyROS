#!/usr/bin/env python3
"""
Unified PyVista Visualizer - Áµ±‰∏Ä„Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâÂØæÂøú„ÅÆÊã°ÂºµÂèØË¶ñÂåñ
Êó¢Â≠ò„ÅÆPyVistaVisualizer„ÇíÊã°Âºµ„Åó„Å¶SimPyROSÁµ±‰∏Ä„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ„Å´ÂØæÂøú
"""

import time
import math
import threading
from typing import Dict, List, Optional, Callable, Any

from .pyvista_visualizer import PyVistaVisualizer, SceneBuilder
# Legacy classes replaced with modern architecture
class SimulationBackend:
    SIMPLE_WHILE_LOOP = "simple_while_loop"
    SIMPY_FREQUENCY_GROUP = "simpy_frequency_group"  
    SIMPY_PURE = "simpy_pure"

class BaseSimulationManager:
    pass
from .simulation_object import Velocity, Pose

try:
    import pyvista as pv
    PYVISTA_AVAILABLE = True
except ImportError:
    PYVISTA_AVAILABLE = False


class UnifiedPyVistaVisualizer(PyVistaVisualizer):
    """Áµ±‰∏Ä„Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâÂØæÂøúPyVistaVisualizer"""
    
    def __init__(self, interactive: bool = True, window_size=(1400, 900)):
        super().__init__(interactive, window_size)
        
        # Áµ±‰∏Ä„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„ÇπÁî®„ÅÆËøΩÂä†Áä∂ÊÖã
        self.simulation_manager = None
        self.current_backend = None
        self.backend_switch_callbacks = []
        
        # UIË¶ÅÁ¥†
        self.backend_text_actor = None
        self.stats_text_actor = None
        self.control_text_actor = None
        
        # „É≠„Éú„ÉÉ„ÉàÁÆ°ÁêÜ
        self.robot_visualization_data = {}
        self.update_thread = None
        self.running = False
        
        # Áµ±Ë®àÊÉÖÂ†±
        self.visualization_stats = {
            'start_time': 0.0,
            'frame_count': 0,
            'last_update_time': 0.0
        }
    
    def setup_unified_scene(self):
        """Áµ±‰∏Ä„Ç∑„Éº„É≥Ë®≠ÂÆö"""
        
        if not self.available:
            return False
        
        plotter = self.plotter
        
        # ËÉåÊôØ„Å®„É©„Ç§„ÉÜ„Ç£„É≥„Ç∞
        plotter.set_background('darkslateblue')
        self._setup_lighting(plotter)
        
        # Âú∞Èù¢
        SceneBuilder.add_ground_plane(
            plotter, self.pv,
            center=(0, 0, -0.5),
            size=40.0,
            color='dimgray',
            opacity=0.4
        )
        
        # Â∫ßÊ®ôËª∏
        SceneBuilder.add_coordinate_axes(
            plotter, self.pv,
            length=3.0,
            origin=(0, 0, 0)
        )
        
        # „Ç´„É°„É©‰ΩçÁΩÆ
        plotter.camera_position = [(0, -30, 20), (0, 0, 0), (0, 0, 1)]
        
        # UIË¶ÅÁ¥†ËøΩÂä†
        self._setup_unified_ui()
        
        print("üì∫ Unified PyVista scene setup complete")
        return True
    
    def _setup_lighting(self, plotter):
        """„É©„Ç§„ÉÜ„Ç£„É≥„Ç∞Ë®≠ÂÆö"""
        try:
            # PyVista„ÅÆ„Éá„Éï„Ç©„É´„Éà„É©„Ç§„ÉÜ„Ç£„É≥„Ç∞„Çí‰ΩøÁî®
            plotter.enable_depth_peeling()
            plotter.add_light(self.pv.Light(
                position=(10, 10, 10),
                focal_point=(0, 0, 0),
                color='white'
            ))
        except Exception as e:
            print(f"‚ö†Ô∏è Lighting setup warning: {e}")
            # „É©„Ç§„ÉÜ„Ç£„É≥„Ç∞„Ç®„É©„Éº„ÅØÁÑ°Ë¶ñ„Åó„Å¶„Éá„Éï„Ç©„É´„Éà„Çí‰ΩøÁî®
    
    def _setup_unified_ui(self):
        """Áµ±‰∏ÄUIË¶ÅÁ¥†Ë®≠ÂÆö"""
        plotter = self.plotter
        
        # „É°„Ç§„É≥„Çø„Ç§„Éà„É´
        plotter.add_text(
            "üéØ SimPyROS Unified Backend Visualization",
            position='upper_edge',
            font_size=16,
            color='white'
        )
        
        # „Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâÊÉÖÂ†±
        self.backend_text_actor = plotter.add_text(
            "Backend: None Selected",
            position='upper_left',
            font_size=12,
            color='yellow'
        )
        
        # Áµ±Ë®àÊÉÖÂ†±
        self.stats_text_actor = plotter.add_text(
            "Statistics:\nRTF: 0.000x\nCallbacks/sec: 0\nRobots: 0\nFrames: 0",
            position='lower_left',
            font_size=10,
            color='cyan'
        )
        
        # Âà∂Âæ°„Ç¨„Ç§„Éâ
        self.control_text_actor = plotter.add_text(
            "üéÆ Controls:\n"
            "1Ô∏è‚É£ Simple While Loop (Red)\n"
            "2Ô∏è‚É£ SimPy FrequencyGroup (Blue)\n"
            "3Ô∏è‚É£ Pure SimPy (Green)\n"
            "Space: Pause/Resume\n"
            "R: Reset Camera\n"
            "Q: Quit",
            position='lower_right',
            font_size=9,
            color='lightgreen'
        )
        
        # „Ç≠„Éº„Éú„Éº„Éâ„Ç§„Éô„É≥„ÉàË®≠ÂÆö
        self._setup_keyboard_controls()
    
    def _setup_keyboard_controls(self):
        """„Ç≠„Éº„Éú„Éº„ÉâÂà∂Âæ°Ë®≠ÂÆö"""
        
        def key_press_handler(key):
            if key == '1':
                self._request_backend_switch(SimulationBackend.SIMPLE_WHILE_LOOP)
            elif key == '2':
                self._request_backend_switch(SimulationBackend.SIMPY_FREQUENCY_GROUP)
            elif key == '3':
                self._request_backend_switch(SimulationBackend.SIMPY_PURE)
            elif key == ' ':
                self._toggle_pause()
            elif key.lower() == 'r':
                self.plotter.reset_camera()
            elif key.lower() == 'q':
                self.plotter.close()
        
        # „Ç≠„Éº„Ç§„Éô„É≥„ÉàÁôªÈå≤
        try:
            self.plotter.iren.add_observer(
                'KeyPressEvent',
                lambda obj, event: key_press_handler(self.plotter.iren.GetKeySym())
            )
        except Exception as e:
            print(f"‚ö†Ô∏è Keyboard control setup warning: {e}")
    
    def attach_simulation_manager(self, sim_manager: BaseSimulationManager):
        """„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥ÁÆ°ÁêÜ„ÇØ„É©„Çπ„Çí„Ç¢„Çø„ÉÉ„ÉÅ"""
        
        self.simulation_manager = sim_manager
        
        # „Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâÊÉÖÂ†±ÂèñÂæó
        backend_info = sim_manager.get_backend_info()
        self.current_backend = backend_info['backend']
        
        # UIÊõ¥Êñ∞
        self._update_backend_display()
        
        print(f"üîó Attached simulation manager: {self.current_backend.value}")
    
    def start_visualization_loop(self):
        """ÂèØË¶ñÂåñ„É´„Éº„ÉóÈñãÂßã"""
        
        if not self.available or not self.simulation_manager:
            return False
        
        self.running = True
        self.visualization_stats['start_time'] = time.time()
        
        # Êõ¥Êñ∞„Çπ„É¨„ÉÉ„ÉâÈñãÂßã
        self.update_thread = threading.Thread(
            target=self._visualization_update_loop,
            daemon=True
        )
        self.update_thread.start()
        
        print("üé¨ Visualization update loop started")
        return True
    
    def stop_visualization_loop(self):
        """ÂèØË¶ñÂåñ„É´„Éº„ÉóÂÅúÊ≠¢"""
        self.running = False
        if self.update_thread and self.update_thread.is_alive():
            self.update_thread.join(timeout=1.0)
        print("üé¨ Visualization update loop stopped")
    
    def _visualization_update_loop(self):
        """ÂèØË¶ñÂåñÊõ¥Êñ∞„É´„Éº„Éó"""
        
        last_robot_sync = 0.0
        
        while self.running:
            try:
                current_time = time.time()
                
                # „É≠„Éú„ÉÉ„ÉàÂèØË¶ñÂåñÊõ¥Êñ∞Ôºà30HzÔºâ
                if current_time - last_robot_sync >= 0.033:
                    self._update_robot_visualization()
                    last_robot_sync = current_time
                
                # Áµ±Ë®àÊõ¥Êñ∞Ôºà10HzÔºâ
                if current_time - self.visualization_stats['last_update_time'] >= 0.1:
                    self._update_statistics_display()
                    self.visualization_stats['last_update_time'] = current_time
                
                self.visualization_stats['frame_count'] += 1
                
                # Êõ¥Êñ∞„É¨„Éº„ÉàÂà∂Âæ°
                time.sleep(0.01)  # 100HzÂü∫Êú¨„É¨„Éº„Éà
                
            except Exception as e:
                print(f"‚ö†Ô∏è Visualization update error: {e}")
                break
    
    def _update_robot_visualization(self):
        """„É≠„Éú„ÉÉ„ÉàÂèØË¶ñÂåñÊõ¥Êñ∞"""
        
        if not self.simulation_manager or not hasattr(self.simulation_manager, 'robots'):
            return
        
        robots = self.simulation_manager.robots
        
        # Êñ∞„Åó„ÅÑ„É≠„Éú„ÉÉ„Éà„ÅÆËøΩÂä†
        for robot_name, robot in robots.items():
            if robot_name not in self.robot_visualization_data:
                self._add_robot_to_visualization(robot_name, robot)
        
        # Êó¢Â≠ò„É≠„Éú„ÉÉ„Éà„ÅÆ‰ΩçÁΩÆÊõ¥Êñ∞
        for robot_name, viz_data in self.robot_visualization_data.items():
            if robot_name in robots:
                self._update_robot_position(robot_name, robots[robot_name], viz_data)
    
    def _add_robot_to_visualization(self, robot_name: str, robot: Any):
        """„É≠„Éú„ÉÉ„Éà„ÇíÂèØË¶ñÂåñ„Å´ËøΩÂä†"""
        
        try:
            # „É≠„Éú„ÉÉ„Éà„É°„ÉÉ„Ç∑„É•‰ΩúÊàê
            robot_mesh = self._create_unified_robot_mesh()
            
            # „Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„Å´Âøú„Åò„ÅüËâ≤
            color = self._get_backend_color()
            
            # ÂàùÊúü‰ΩçÁΩÆÂèñÂæó
            if hasattr(robot, 'position'):
                position = robot.position[:3] if len(robot.position) >= 3 else [0, 0, 0]
            elif hasattr(robot, 'pose') and hasattr(robot.pose, 'position'):
                position = robot.pose.position[:3]
            else:
                position = [0, 0, 0]
            
            # ‰ΩçÁΩÆÈÅ©Áî®
            positioned_mesh = robot_mesh.translate(position, inplace=False)
            
            # „Ç¢„ÇØ„Çø„ÉºËøΩÂä†
            actor = self.plotter.add_mesh(
                positioned_mesh,
                color=color,
                opacity=0.8,
                name=robot_name
            )
            
            # ÂèØË¶ñÂåñ„Éá„Éº„Çø‰øùÂ≠ò
            self.robot_visualization_data[robot_name] = {
                'actor': actor,
                'last_position': position.copy(),
                'mesh': robot_mesh,
                'update_count': 0
            }
            
        except Exception as e:
            print(f"‚ö†Ô∏è Failed to add robot {robot_name}: {e}")
    
    def _update_robot_position(self, robot_name: str, robot: Any, viz_data: Dict):
        """„É≠„Éú„ÉÉ„Éà‰ΩçÁΩÆÊõ¥Êñ∞"""
        
        try:
            # ÁèæÂú®‰ΩçÁΩÆÂèñÂæó
            if hasattr(robot, 'position'):
                new_position = robot.position[:3] if len(robot.position) >= 3 else [0, 0, 0]
            elif hasattr(robot, 'pose') and hasattr(robot.pose, 'position'):
                new_position = robot.pose.position[:3]
            else:
                return
            
            # ‰ΩçÁΩÆÂ§âÊõ¥„ÉÅ„Çß„ÉÉ„ÇØ
            last_pos = viz_data['last_position']
            if self._position_changed(new_position, last_pos):
                
                # Êñ∞„Åó„ÅÑ„É°„ÉÉ„Ç∑„É•‰ΩúÊàê
                new_mesh = viz_data['mesh'].copy()
                positioned_mesh = new_mesh.translate(new_position, inplace=False)
                
                # Âêë„ÅçÈÅ©Áî®Ôºà„ÇÇ„Åó„ÅÇ„Çå„Å∞Ôºâ
                if hasattr(robot, 'orientation') and len(robot.orientation) >= 3:
                    yaw = robot.orientation[2]
                    positioned_mesh = positioned_mesh.rotate_z(math.degrees(yaw), inplace=False)
                
                # „Ç¢„ÇØ„Çø„ÉºÊõ¥Êñ∞
                self.plotter.remove_actor(robot_name)
                
                color = self._get_backend_color()
                actor = self.plotter.add_mesh(
                    positioned_mesh,
                    color=color,
                    opacity=0.8,
                    name=robot_name
                )
                
                # „Éá„Éº„ÇøÊõ¥Êñ∞
                viz_data['actor'] = actor
                viz_data['last_position'] = new_position.copy()
                viz_data['update_count'] += 1
        
        except Exception as e:
            # ÂèØË¶ñÂåñ„Ç®„É©„Éº„ÅØÁÑ°Ë¶ñÔºà„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥„ÇíÊ≠¢„ÇÅ„Å™„ÅÑÔºâ
            pass
    
    def _create_unified_robot_mesh(self):
        """Áµ±‰∏Ä„É≠„Éú„ÉÉ„Éà„É°„ÉÉ„Ç∑„É•‰ΩúÊàê"""
        
        # „Éô„Éº„ÇπÔºàÂÜÜÊü±Ôºâ
        base = self.pv.Cylinder(
            center=[0, 0, 0.1],
            direction=[0, 0, 1],
            radius=0.4,
            height=0.2
        )
        
        # ‰∏äÈÉ®„Çª„É≥„Çµ„ÉºÔºàÁêÉÔºâ
        sensor = self.pv.Sphere(
            center=[0, 0, 0.3],
            radius=0.15
        )
        
        # ÊñπÂêëÊåáÁ§∫Âô®ÔºàÁü¢Âç∞Ôºâ
        direction_arrow = self.pv.Arrow(
            start=[0, 0, 0.2],
            direction=[1, 0, 0],
            scale=0.5
        )
        
        # „Éõ„Ç§„Éº„É´ÔºàÂ∑¶Âè≥Ôºâ
        wheel_left = self.pv.Cylinder(
            center=[-0.3, 0.4, 0],
            direction=[0, 1, 0],
            radius=0.1,
            height=0.05
        )
        
        wheel_right = self.pv.Cylinder(
            center=[-0.3, -0.4, 0],
            direction=[0, 1, 0],
            radius=0.1,
            height=0.05
        )
        
        # ÂÖ®„Å¶ÂêàÊàê
        robot_mesh = base + sensor + direction_arrow + wheel_left + wheel_right
        
        return robot_mesh
    
    def _get_backend_color(self) -> str:
        """„Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„Å´Âøú„Åò„ÅüËâ≤ÂèñÂæó"""
        if not self.current_backend:
            return 'gray'
        
        color_map = {
            SimulationBackend.SIMPLE_WHILE_LOOP: 'red',
            SimulationBackend.SIMPY_FREQUENCY_GROUP: 'blue',
            SimulationBackend.SIMPY_PURE: 'green'
        }
        
        return color_map.get(self.current_backend, 'gray')
    
    def _position_changed(self, pos1: List[float], pos2: List[float], threshold: float = 0.01) -> bool:
        """‰ΩçÁΩÆÂ§âÊõ¥Âà§ÂÆö"""
        return any(abs(a - b) > threshold for a, b in zip(pos1, pos2))
    
    def _update_statistics_display(self):
        """Áµ±Ë®àË°®Á§∫Êõ¥Êñ∞"""
        
        if not self.simulation_manager:
            return
        
        try:
            # „Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥Áµ±Ë®àÂèñÂæó
            sim_stats = self.simulation_manager.get_performance_stats()
            
            # ÂèØË¶ñÂåñÁµ±Ë®àË®àÁÆó
            viz_elapsed = time.time() - self.visualization_stats['start_time']
            viz_fps = self.visualization_stats['frame_count'] / viz_elapsed if viz_elapsed > 0 else 0
            
            # Áµ±Ë®à„ÉÜ„Ç≠„Çπ„Éà‰ΩúÊàê
            stats_text = (
                f"üìä Statistics:\n"
                f"RTF: {sim_stats.get('rtf', 0):.3f}x\n"
                f"CB/sec: {sim_stats.get('callbacks_per_sec', 0):.0f}\n"
                f"Robots: {len(self.robot_visualization_data)}\n"
                f"Viz FPS: {viz_fps:.1f}\n"
                f"Sim Frames: {sim_stats.get('frame_count', 0)}\n"
                f"Runtime: {viz_elapsed:.1f}s"
            )
            
            self.stats_text_actor.SetText(3, stats_text)
            
        except Exception as e:
            print(f"‚ö†Ô∏è Statistics update error: {e}")
    
    def _update_backend_display(self):
        """„Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâË°®Á§∫Êõ¥Êñ∞"""
        
        if not self.current_backend:
            return
        
        backend_text = f"üîß Backend: {self.current_backend.value}"
        
        # ÊÄßËÉΩ„ÉÜ„Ç£„Ç¢Ë°®Á§∫
        if self.simulation_manager:
            tier = self.simulation_manager._get_performance_tier()
            backend_text += f" ({tier})"
        
        self.backend_text_actor.SetText(3, backend_text)
        
        # Êó¢Â≠ò„É≠„Éú„ÉÉ„Éà„ÅÆËâ≤Êõ¥Êñ∞
        self._update_robot_colors()
    
    def _update_robot_colors(self):
        """„É≠„Éú„ÉÉ„ÉàËâ≤Êõ¥Êñ∞"""
        
        new_color = self._get_backend_color()
        
        for robot_name, viz_data in self.robot_visualization_data.items():
            try:
                # „Ç¢„ÇØ„Çø„Éº„ÅÆËâ≤„ÇíÊõ¥Êñ∞
                viz_data['actor'].GetProperty().SetColor(
                    *self.pv.colors.get_color(new_color)
                )
            except Exception as e:
                print(f"‚ö†Ô∏è Color update error for {robot_name}: {e}")
    
    def _request_backend_switch(self, new_backend: SimulationBackend):
        """„Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâÂàá„ÇäÊõø„ÅàË¶ÅÊ±Ç"""
        
        if self.current_backend == new_backend:
            print(f"‚ö†Ô∏è Already using {new_backend.value}")
            return
        
        print(f"üîÑ Requesting switch to {new_backend.value}...")
        
        # „Ç≥„Éº„É´„Éê„ÉÉ„ÇØÂÆüË°å
        for callback in self.backend_switch_callbacks:
            try:
                callback(new_backend)
            except Exception as e:
                print(f"‚ö†Ô∏è Backend switch callback error: {e}")
    
    def _toggle_pause(self):
        """‰∏ÄÊôÇÂÅúÊ≠¢Âàá„ÇäÊõø„Åà"""
        
        if hasattr(self.simulation_manager, 'paused'):
            self.simulation_manager.paused = not getattr(self.simulation_manager, 'paused', False)
            status = "Paused" if self.simulation_manager.paused else "Running"
            print(f"üéÆ Simulation {status}")
        else:
            print("‚ö†Ô∏è Pause not supported by current backend")
    
    def add_backend_switch_callback(self, callback: Callable[[SimulationBackend], None]):
        """„Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâÂàá„ÇäÊõø„Åà„Ç≥„Éº„É´„Éê„ÉÉ„ÇØËøΩÂä†"""
        self.backend_switch_callbacks.append(callback)
    
    def clear_robots(self):
        """ÂÖ®„É≠„Éú„ÉÉ„Éà„ÇØ„É™„Ç¢"""
        
        for robot_name in list(self.robot_visualization_data.keys()):
            try:
                self.plotter.remove_actor(robot_name)
            except:
                pass
        
        self.robot_visualization_data.clear()
        print("üì∫ Cleared all robot visualizations")
    
    def show_unified(self):
        """Áµ±‰∏ÄÂèØË¶ñÂåñË°®Á§∫"""
        
        if not self.available:
            print("‚ùå PyVista not available")
            return
        
        try:
            print("üñ•Ô∏è Opening unified PyVista visualization...")
            print("   Use keyboard controls to switch backends")
            
            # „Ç¶„Ç£„É≥„Éâ„Ç¶Ë°®Á§∫Ôºà„Éñ„É≠„ÉÉ„Ç≠„É≥„Ç∞Ôºâ
            self.plotter.show()
            
        except Exception as e:
            print(f"‚ùå Visualization error: {e}")
        
        finally:
            self.stop_visualization_loop()


def create_unified_visualizer(interactive: bool = True) -> Optional[UnifiedPyVistaVisualizer]:
    """Áµ±‰∏Ä„Éì„Ç∏„É•„Ç¢„É©„Ç§„Ç∂„Éº‰ΩúÊàê"""
    
    if not PYVISTA_AVAILABLE:
        print("‚ö†Ô∏è PyVista not available for unified visualization")
        return None
    
    visualizer = UnifiedPyVistaVisualizer(interactive=interactive)
    
    if not visualizer.available:
        print("‚ùå Failed to create unified visualizer")
        return None
    
    return visualizer